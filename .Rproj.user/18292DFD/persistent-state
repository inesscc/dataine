build-last-errors="[]"
build-last-errors-base-dir="C:/ine/dataine2/"
build-last-outputs="[{\"type\":0,\"output\":\"==> devtools::test()\\n\\n\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[22m\\u001B[36mi\\u001B[39m Testing \\u001B[34minedata\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\"},{\"type\":1,\"output\":\"\\u001B[32mv\\u001B[39m | \\u001B[38;5;214mF\\u001B[39m \\u001B[35mW\\u001B[39m \\u001B[34mS\\u001B[39m \\u001B[32m OK\\u001B[39m | Context\\r\\n\"},{\"type\":1,\"output\":\"\\r/ |         0 | get_catalog                                    \"},{\"type\":1,\"output\":\"\\r\\u001B[38;5;214m-\\u001B[39m | \\u001B[38;5;214m1\\u001B[39m       0 | get_catalog                                    \\r\\u001B[31mx\\u001B[39m | \\u001B[38;5;214m1\\u001B[39m       0 | get_catalog\\u001B[90m [2.3s]\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"---------------------------------------------------------------\\r\\n\"},{\"type\":1,\"output\":\"\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[38;5;214mError\\u001B[39m (\\u001B[34mtest-get_catalog.R:4:1\\u001B[39m): (code run outside of `test_that()`)\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"Error in `curl::curl_fetch_memory(url, handle = handle)`: Failed to connect to localhost port 90 after 2220 ms: Connection refused\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1mBacktrace:\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 1. \\u001B[39mget_catalog(\\\"ene\\\") %>% dplyr::pull(survey)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m      at test-get_catalog.R:4:0\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 3. \\u001B[39m\\u001B[1minedata\\u001B[22m::get_catalog(\\\"ene\\\")\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 4. \\u001B[39m\\u001B[1mhttr\\u001B[22m::GET(paste0(ip, \\\"/info?dataset_filter=\\\", dataset))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m      at dataine2/R/get_catalog.R:32:4\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 5. \\u001B[39mhttr:::request_perform(req, hu$handle$handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 7. \\u001B[39mhttr:::request_fetch.write_memory(req$output, req$url, handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 8. \\u001B[39m\\u001B[1mcurl\\u001B[22m::curl_fetch_memory(url, handle = handle)\\r\\n\"},{\"type\":1,\"output\":\"---------------------------------------------------------------\\r\\n\"},{\"type\":1,\"output\":\"\\r/ |         0 | get_columns                                    \"},{\"type\":1,\"output\":\"\\r- | 1       0 | get_columns                                    \"},{\"type\":1,\"output\":\"\\r\\\\ | 2       0 | get_columns                                    \\r\\u001B[31mx\\u001B[39m | \\u001B[38;5;214m2\\u001B[39m       0 | get_columns\\u001B[90m [4.6s]\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"---------------------------------------------------------------\\r\\n\"},{\"type\":1,\"output\":\"\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[38;5;214mError\\u001B[39m (\\u001B[34mtest-get_columns.R:6:3\\u001B[39m): get_columns returns a character vector\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"Error in `curl::curl_fetch_memory(url, handle = handle)`: Failed to connect to localhost port 90 after 2234 ms: Connection refused\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1mBacktrace:\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 1. \\u001B[39m\\u001B[1mtestthat\\u001B[22m::expect_equal(...)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m      at test-get_columns.R:6:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 4. \\u001B[39m\\u001B[1minedata\\u001B[22m::get_columns(\\\"ene\\\", \\\"2011-05-amj\\\")\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 5. \\u001B[39m\\u001B[1mhttr\\u001B[22m::GET(paste0(ip, glue(\\\"/colnames?dataset={dataset}&version={version}\\\")))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m      at dataine2/R/get_columns.R:23:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 6. \\u001B[39mhttr:::request_perform(req, hu$handle$handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 8. \\u001B[39mhttr:::request_fetch.write_memory(req$output, req$url, handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 9. \\u001B[39m\\u001B[1mcurl\\u001B[22m::curl_fetch_memory(url, handle = handle)\\r\\n\"},{\"type\":1,\"output\":\"\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[38;5;214mError\\u001B[39m (\\u001B[34mtest-get_columns.R:11:3\\u001B[39m): get_columns returns a character vector\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"Error in `curl::curl_fetch_memory(url, handle = handle)`: Failed to connect to localhost port 90 after 2253 ms: Connection refused\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1mBacktrace:\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 1. \\u001B[39m\\u001B[1mtestthat\\u001B[22m::expect_equal(class(get_columns(\\\"enusc\\\", \\\"2017\\\")), \\\"character\\\")\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m      at test-get_columns.R:11:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 4. \\u001B[39m\\u001B[1minedata\\u001B[22m::get_columns(\\\"enusc\\\", \\\"2017\\\")\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 5. \\u001B[39m\\u001B[1mhttr\\u001B[22m::GET(paste0(ip, glue(\\\"/colnames?dataset={dataset}&version={version}\\\")))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m      at dataine2/R/get_columns.R:23:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 6. \\u001B[39mhttr:::request_perform(req, hu$handle$handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 8. \\u001B[39mhttr:::request_fetch.write_memory(req$output, req$url, handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 9. \\u001B[39m\\u001B[1mcurl\\u001B[22m::curl_fetch_memory(url, handle = handle)\\r\\n\"},{\"type\":1,\"output\":\"---------------------------------------------------------------\\r\\n\"},{\"type\":1,\"output\":\"\\r/ |         0 | get_data                                       \"},{\"type\":1,\"output\":\"\\r- |         1 | get_data                                       \"},{\"type\":1,\"output\":\"\\r\\\\ | 1       1 | get_data                                       \"},{\"type\":1,\"output\":\"\\r| | 2       1 | get_data                                       \"},{\"type\":1,\"output\":\"\\r\\u001B[38;5;214m/\\u001B[39m | \\u001B[38;5;214m3\\u001B[39m       1 | get_data                                       \\r\\u001B[31mx\\u001B[39m | \\u001B[38;5;214m3\\u001B[39m       1 | get_data\\u001B[90m [9.0s]\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"---------------------------------------------------------------\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[38;5;214mError\\u001B[39m (\\u001B[34mtest-get_data.R:12:3\\u001B[39m): get_data returns a data.frame\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"Error in `curl::curl_fetch_memory(url, handle = handle)`: Failed to connect to localhost port 90 after 2262 ms: Connection refused\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1mBacktrace:\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  1. \\u001B[39m\\u001B[1mtestthat\\u001B[22m::expect_equal(...)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at test-get_data.R:12:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  4. \\u001B[39m\\u001B[1minedata\\u001B[22m::get_data(\\\"enusc\\\", \\\"2020\\\")\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  5. \\u001B[39minedata:::validate_version(dataset, version)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at dataine2/R/get_data.R:33:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  8. \\u001B[39minedata::get_catalog(dataset)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  9. \\u001B[39m\\u001B[1mhttr\\u001B[22m::GET(paste0(ip, \\\"/info?dataset_filter=\\\", dataset))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at dataine2/R/get_catalog.R:32:4\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 10. \\u001B[39mhttr:::request_perform(req, hu$handle$handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 12. \\u001B[39mhttr:::request_fetch.write_memory(req$output, req$url, handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 13. \\u001B[39m\\u001B[1mcurl\\u001B[22m::curl_fetch_memory(url, handle = handle)\\r\\n\"},{\"type\":1,\"output\":\"\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[38;5;214mError\\u001B[39m (\\u001B[34mtest-get_data.R:19:3\\u001B[39m): get_data returns right error when version doesn't exist\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"Error in `curl::curl_fetch_memory(url, handle = handle)`: Failed to connect to localhost port 90 after 2229 ms: Connection refused\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1mBacktrace:\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  1. \\u001B[39m\\u001B[1mtestthat\\u001B[22m::expect_error(get_data(data, \\\"2000\\\"), get_available_versions(data))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at test-get_data.R:19:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  5. \\u001B[39m\\u001B[1minedata\\u001B[22m:::get_available_versions(data)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  9. \\u001B[39minedata::get_catalog(dataset)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 10. \\u001B[39m\\u001B[1mhttr\\u001B[22m::GET(paste0(ip, \\\"/info?dataset_filter=\\\", dataset))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at dataine2/R/get_catalog.R:32:4\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 11. \\u001B[39mhttr:::request_perform(req, hu$handle$handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 13. \\u001B[39mhttr:::request_fetch.write_memory(req$output, req$url, handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 14. \\u001B[39m\\u001B[1mcurl\\u001B[22m::curl_fetch_memory(url, handle = handle)\\r\\n\"},{\"type\":1,\"output\":\"\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1m\\u001B[38;5;214mError\\u001B[39m (\\u001B[34mtest-get_data.R:23:1\\u001B[39m): (code run outside of `test_that()`)\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"Error in `curl::curl_fetch_memory(url, handle = handle)`: Failed to connect to localhost port 90 after 2241 ms: Connection refused\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[1mBacktrace:\\u001B[22m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  1. \\u001B[39m\\u001B[1minedata\\u001B[22m::get_data(\\\"enusc\\\", \\\"2017\\\")\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at test-get_data.R:23:0\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  2. \\u001B[39minedata:::validate_version(dataset, version)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at dataine2/R/get_data.R:33:2\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  5. \\u001B[39minedata::get_catalog(dataset)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  6. \\u001B[39m\\u001B[1mhttr\\u001B[22m::GET(paste0(ip, \\\"/info?dataset_filter=\\\", dataset))\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m       at dataine2/R/get_catalog.R:32:4\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  7. \\u001B[39mhttr:::request_perform(req, hu$handle$handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m  9. \\u001B[39mhttr:::request_fetch.write_memory(req$output, req$url, handle)\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[90m 10. \\u001B[39m\\u001B[1mcurl\\u001B[22m::curl_fetch_memory(url, handle = handle)\\r\\n\"},{\"type\":1,\"output\":\"---------------------------------------------------------------\\r\\n\"},{\"type\":1,\"output\":\"\\r\\n\"},{\"type\":1,\"output\":\"== \\u001B[1mResults\\u001B[22m ====================================================\\r\\n\"},{\"type\":1,\"output\":\"\\u001B[36mDuration: 16.0 s\\u001B[39m\\r\\n\"},{\"type\":1,\"output\":\"\\r\\n\"},{\"type\":1,\"output\":\"[ \\u001B[38;5;214mFAIL\\u001B[39m 6 | WARN 0 | SKIP 0 | PASS 1 ]\\r\\n\"},{\"type\":1,\"output\":\"Warning message:\\r\\n\"},{\"type\":1,\"output\":\"replacing previous import 'jsonlite::flatten' by 'purrr::flatten' when loading 'inedata' \\r\\n\"},{\"type\":1,\"output\":\"\"}]"
compile_pdf_state="{\"tab_visible\":false,\"running\":false,\"target_file\":\"\",\"output\":\"\",\"errors\":[]}"
files.monitored-path=""
find-in-files-state="{\"handle\":\"\",\"input\":\"\",\"path\":\"\",\"regex\":false,\"ignoreCase\":false,\"results\":{\"file\":[],\"line\":[],\"lineValue\":[],\"matchOn\":[],\"matchOff\":[],\"replaceMatchOn\":[],\"replaceMatchOff\":[]},\"running\":false,\"replace\":false,\"preview\":false,\"gitFlag\":false,\"replacePattern\":\"\"}"
imageDirtyState="1"
saveActionState="-1"
